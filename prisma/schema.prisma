generator client {
  provider = "prisma-client-js"
  output   = "./.generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  image         String?
  password      String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts     Account[]
  sessions     Session[]
  transactions Transaction[]
  bankAccount  BankAccount[]

  @@map("users")
}

enum BankAccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
}

model BankAccount {
  id           String          @id @default(uuid())
  name         String
  type         BankAccountType
  balance      Float           @default(0)
  userId       String          @map("user_id")
  user         User            @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("bank_accounts")
}

enum TransactionCategory {
  FOOD
  TRANSPORT
  ENTERTAINMENT
  UTILITIES
  HEALTH
  EDUCATION
  DEBTS
  SALARY
  FREELANCE
  INVESTMENTS
  OTHER
}

model Transaction {
  id            String              @id @default(uuid())
  description   String
  type          String
  amount        Float
  category      TransactionCategory
  date          DateTime            @default(now())
  bankAccountId String              @map("bank_account_id")
  userId        String              @map("user_id")

  user        User        @relation(fields: [userId], references: [id])
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])

  @@map("transactions")
}
